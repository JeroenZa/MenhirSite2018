/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Rx';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ArticleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllArticles(): Observable<Article[] | null> {
        let url_ = this.baseUrl + "/api/article";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetAllArticles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllArticles(<any>response_);
                } catch (e) {
                    return <Observable<Article[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Article[] | null>><any>Observable.throw(response_);
        });
    }

    protected processGetAllArticles(response: HttpResponseBase): Observable<Article[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Article.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Article[] | null>(<any>null);
    }

    createArticle(article: Article | null): Observable<number> {
        let url_ = this.baseUrl + "/api/article";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(article);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processCreateArticle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateArticle(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateArticle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }

    updateArticle(article: Article | null): Observable<number> {
        let url_ = this.baseUrl + "/api/article";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(article);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processUpdateArticle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateArticle(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateArticle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }

    getArticle(id: number): Observable<Article | null> {
        let url_ = this.baseUrl + "/api/article/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetArticle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetArticle(<any>response_);
                } catch (e) {
                    return <Observable<Article | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Article | null>><any>Observable.throw(response_);
        });
    }

    protected processGetArticle(response: HttpResponseBase): Observable<Article | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Article.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Article | null>(<any>null);
    }

    deleteArticle(id: number): Observable<number> {
        let url_ = this.baseUrl + "/api/article/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDeleteArticle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteArticle(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processDeleteArticle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }
}

@Injectable()
export class LoggingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllLogging(): Observable<Logging[] | null> {
        let url_ = this.baseUrl + "/api/logging";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLogging(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllLogging(<any>response_);
                } catch (e) {
                    return <Observable<Logging[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Logging[] | null>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLogging(response: HttpResponseBase): Observable<Logging[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Logging.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Logging[] | null>(<any>null);
    }

    createLogging(logging: Logging | null): Observable<number> {
        let url_ = this.baseUrl + "/api/logging";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(logging);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processCreateLogging(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateLogging(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateLogging(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }

    getLoggingById(id: number): Observable<Logging | null> {
        let url_ = this.baseUrl + "/api/logging/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetLoggingById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLoggingById(<any>response_);
                } catch (e) {
                    return <Observable<Logging | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Logging | null>><any>Observable.throw(response_);
        });
    }

    protected processGetLoggingById(response: HttpResponseBase): Observable<Logging | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Logging.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Logging | null>(<any>null);
    }

    getLoggingByLevel(level: string): Observable<Logging[] | null> {
        let url_ = this.baseUrl + "/api/logging/{level}";
        if (level === undefined || level === null)
            throw new Error("The parameter 'level' must be defined.");
        url_ = url_.replace("{level}", encodeURIComponent("" + level)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetLoggingByLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLoggingByLevel(<any>response_);
                } catch (e) {
                    return <Observable<Logging[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Logging[] | null>><any>Observable.throw(response_);
        });
    }

    protected processGetLoggingByLevel(response: HttpResponseBase): Observable<Logging[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Logging.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Logging[] | null>(<any>null);
    }

    deleteLogging(id: number): Observable<number> {
        let url_ = this.baseUrl + "/api/loggin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDeleteLogging(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLogging(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLogging(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status === 409) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<number>(<any>null);
    }
}

export class DeletableBaseModel implements IDeletableBaseModel {
    id: number;
    createdBy?: string | undefined;
    createdOn: moment.Moment;
    modifiedBy?: string | undefined;
    modifiedOn: moment.Moment;

    constructor(data?: IDeletableBaseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.createdBy = data["createdBy"];
            this.createdOn = data["createdOn"] ? moment.utc(data["createdOn"]) : <any>undefined;
            this.modifiedBy = data["modifiedBy"];
            this.modifiedOn = data["modifiedOn"] ? moment.utc(data["modifiedOn"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeletableBaseModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeletableBaseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDeletableBaseModel {
    id: number;
    createdBy?: string | undefined;
    createdOn: moment.Moment;
    modifiedBy?: string | undefined;
    modifiedOn: moment.Moment;
}

export class NonDeletableBaseModel extends DeletableBaseModel implements INonDeletableBaseModel {
    deletedOn?: moment.Moment | undefined;

    constructor(data?: INonDeletableBaseModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.deletedOn = data["deletedOn"] ? moment.utc(data["deletedOn"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NonDeletableBaseModel {
        data = typeof data === 'object' ? data : {};
        let result = new NonDeletableBaseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface INonDeletableBaseModel extends IDeletableBaseModel {
    deletedOn?: moment.Moment | undefined;
}

export class Article extends NonDeletableBaseModel implements IArticle {
    title?: string | undefined;
    text?: string | undefined;
    author?: string | undefined;
    imagePath?: string | undefined;
    imagePosition: ImagePosition;
    publishFrom: moment.Moment;
    publishUntil: moment.Moment;
    order: number;
    articleState: ArticleState;
    files?: File[] | undefined;

    constructor(data?: IArticle) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["title"];
            this.text = data["text"];
            this.author = data["author"];
            this.imagePath = data["imagePath"];
            this.imagePosition = data["imagePosition"];
            this.publishFrom = data["publishFrom"] ? moment.utc(data["publishFrom"]) : <any>undefined;
            this.publishUntil = data["publishUntil"] ? moment.utc(data["publishUntil"]) : <any>undefined;
            this.order = data["order"];
            this.articleState = data["articleState"];
            if (data["files"] && data["files"].constructor === Array) {
                this.files = [];
                for (let item of data["files"])
                    this.files.push(File.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Article {
        data = typeof data === 'object' ? data : {};
        let result = new Article();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["text"] = this.text;
        data["author"] = this.author;
        data["imagePath"] = this.imagePath;
        data["imagePosition"] = this.imagePosition;
        data["publishFrom"] = this.publishFrom ? this.publishFrom.toISOString() : <any>undefined;
        data["publishUntil"] = this.publishUntil ? this.publishUntil.toISOString() : <any>undefined;
        data["order"] = this.order;
        data["articleState"] = this.articleState;
        if (this.files && this.files.constructor === Array) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IArticle extends INonDeletableBaseModel {
    title?: string | undefined;
    text?: string | undefined;
    author?: string | undefined;
    imagePath?: string | undefined;
    imagePosition: ImagePosition;
    publishFrom: moment.Moment;
    publishUntil: moment.Moment;
    order: number;
    articleState: ArticleState;
    files?: File[] | undefined;
}

export enum ImagePosition {
    Top = 0, 
    Left = 1, 
    Right = 2, 
    Bottom = 3, 
}

export enum ArticleState {
    Draft = 0, 
    Published = 1, 
    Archived = 2, 
}

export class File extends DeletableBaseModel implements IFile {
    title?: string | undefined;
    type: FileType;
    path?: string | undefined;
    sizeInKb: number;

    constructor(data?: IFile) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["title"];
            this.type = data["type"];
            this.path = data["path"];
            this.sizeInKb = data["sizeInKb"];
        }
    }

    static fromJS(data: any): File {
        data = typeof data === 'object' ? data : {};
        let result = new File();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["type"] = this.type;
        data["path"] = this.path;
        data["sizeInKb"] = this.sizeInKb;
        super.toJSON(data);
        return data; 
    }
}

export interface IFile extends IDeletableBaseModel {
    title?: string | undefined;
    type: FileType;
    path?: string | undefined;
    sizeInKb: number;
}

export enum FileType {
    Pdf = 0, 
    Excel = 1, 
    Word = 2, 
    Text = 3, 
    Other = 4, 
}

export class Logging extends DeletableBaseModel implements ILogging {
    eventId: number;
    incidentId?: string | undefined;
    message?: string | undefined;
    exception?: string | undefined;
    stack?: string | undefined;
    level: LogLevel;

    constructor(data?: ILogging) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.eventId = data["eventId"];
            this.incidentId = data["incidentId"];
            this.message = data["message"];
            this.exception = data["exception"];
            this.stack = data["stack"];
            this.level = data["level"];
        }
    }

    static fromJS(data: any): Logging {
        data = typeof data === 'object' ? data : {};
        let result = new Logging();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["incidentId"] = this.incidentId;
        data["message"] = this.message;
        data["exception"] = this.exception;
        data["stack"] = this.stack;
        data["level"] = this.level;
        super.toJSON(data);
        return data; 
    }
}

export interface ILogging extends IDeletableBaseModel {
    eventId: number;
    incidentId?: string | undefined;
    message?: string | undefined;
    exception?: string | undefined;
    stack?: string | undefined;
    level: LogLevel;
}

export enum LogLevel {
    Debug = 1, 
    Information = 2, 
    Warning = 3, 
    Error = 4, 
    Fatal = 5, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}
